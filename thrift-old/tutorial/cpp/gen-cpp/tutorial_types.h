/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tutorial_TYPES_H
#define tutorial_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "shared_types.h"


namespace tutorial {

struct Operation {
  enum type {
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4
  };
};

extern const std::map<int, const char*> _Operation_VALUES_TO_NAMES;

typedef int32_t MyInteger;

class Work;

class HelloInt;

class HelloDouble;

class HelloString;

class PhoneNumber;

class Person;

class InvalidOperation;

typedef struct _Work__isset {
  _Work__isset() : num1(true), num2(false), op(false), comment(false) {}
  bool num1 :1;
  bool num2 :1;
  bool op :1;
  bool comment :1;
} _Work__isset;

class Work {
 public:

  Work(const Work&);
  Work& operator=(const Work&);
  Work() : num1(0), num2(0), op((Operation::type)0), comment() {
  }

  virtual ~Work() throw();
  int32_t num1;
  int32_t num2;
  Operation::type op;
  std::string comment;

  _Work__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  void __set_op(const Operation::type val);

  void __set_comment(const std::string& val);

  bool operator == (const Work & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(op == rhs.op))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Work &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Work & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Work &a, Work &b);

inline std::ostream& operator<<(std::ostream& out, const Work& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HelloInt__isset {
  _HelloInt__isset() : value(true) {}
  bool value :1;
} _HelloInt__isset;

class HelloInt {
 public:

  HelloInt(const HelloInt&);
  HelloInt& operator=(const HelloInt&);
  HelloInt() : value(0) {
  }

  virtual ~HelloInt() throw();
  int32_t value;

  _HelloInt__isset __isset;

  void __set_value(const int32_t val);

  bool operator == (const HelloInt & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HelloInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloInt &a, HelloInt &b);

inline std::ostream& operator<<(std::ostream& out, const HelloInt& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HelloDouble__isset {
  _HelloDouble__isset() : value(false) {}
  bool value :1;
} _HelloDouble__isset;

class HelloDouble {
 public:

  HelloDouble(const HelloDouble&);
  HelloDouble& operator=(const HelloDouble&);
  HelloDouble() : value(0) {
  }

  virtual ~HelloDouble() throw();
  double value;

  _HelloDouble__isset __isset;

  void __set_value(const double val);

  bool operator == (const HelloDouble & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HelloDouble &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloDouble & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloDouble &a, HelloDouble &b);

inline std::ostream& operator<<(std::ostream& out, const HelloDouble& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HelloString__isset {
  _HelloString__isset() : name(false) {}
  bool name :1;
} _HelloString__isset;

class HelloString {
 public:

  HelloString(const HelloString&);
  HelloString& operator=(const HelloString&);
  HelloString() : name() {
  }

  virtual ~HelloString() throw();
  std::string name;

  _HelloString__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const HelloString & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const HelloString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloString &a, HelloString &b);

inline std::ostream& operator<<(std::ostream& out, const HelloString& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PhoneNumber__isset {
  _PhoneNumber__isset() : number(true), op(false) {}
  bool number :1;
  bool op :1;
} _PhoneNumber__isset;

class PhoneNumber {
 public:

  PhoneNumber(const PhoneNumber&);
  PhoneNumber& operator=(const PhoneNumber&);
  PhoneNumber() : number("6085719874"), op((Operation::type)0) {
  }

  virtual ~PhoneNumber() throw();
  std::string number;
  Operation::type op;

  _PhoneNumber__isset __isset;

  void __set_number(const std::string& val);

  void __set_op(const Operation::type val);

  bool operator == (const PhoneNumber & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const PhoneNumber &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneNumber & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PhoneNumber &a, PhoneNumber &b);

inline std::ostream& operator<<(std::ostream& out, const PhoneNumber& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Person__isset {
  _Person__isset() : name(false), id(false), email(false), phone(false) {}
  bool name :1;
  bool id :1;
  bool email :1;
  bool phone :1;
} _Person__isset;

class Person {
 public:

  Person(const Person&);
  Person& operator=(const Person&);
  Person() : name(), id(0), email() {
  }

  virtual ~Person() throw();
  std::string name;
  int32_t id;
  std::string email;
  PhoneNumber phone;

  _Person__isset __isset;

  void __set_name(const std::string& val);

  void __set_id(const int32_t val);

  void __set_email(const std::string& val);

  void __set_phone(const PhoneNumber& val);

  bool operator == (const Person & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const Person &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Person & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Person &a, Person &b);

inline std::ostream& operator<<(std::ostream& out, const Person& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : whatOp(false), why(false) {}
  bool whatOp :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : whatOp(0), why() {
  }

  virtual ~InvalidOperation() throw();
  int32_t whatOp;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_whatOp(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(whatOp == rhs.whatOp))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
